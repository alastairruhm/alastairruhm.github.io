<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sequelize on RUHM BLOG SITE</title>
    <link>https://blog.ruhm.me/tags/sequelize/</link>
    <description>Recent content in Sequelize on RUHM BLOG SITE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.ruhm.me/tags/sequelize/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何在 sequelize raw query 中如何避免 SQL injection</title>
      <link>https://blog.ruhm.me/post/sequelize-raw-query-practices/</link>
      <pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ruhm.me/post/sequelize-raw-query-practices/</guid>
      <description>如何在 sequelize raw query 中如何避免 SQL injection tl;dr: 结论：在 Sequelize.query() 函数中使用 replacements 对SQL变量赋值。
由于 sequelize 能力有限，一些复杂的查询需求还难通过 sequelize 的 op 的组合来实现，比如 postgresql 中的select distinct on (field)这样的语法
SELECT DISTINCT ON (&amp;quot;fault_id&amp;quot;) event.* from event AND &amp;quot;tenant_id&amp;quot;= &#39;93283d50c03f11e7a2c0a7b189d903d8&#39; \ AND (deleted_at &amp;gt; CURRENT_TIMESTAMP or deleted_at is null) \ ORDER BY fault_id, occur_time desc  因此，我们会考虑使用 Sequelize.query() 原生的查询方式，并且通常会使用 js 的 raw string 来拼接 sql，这里就容易存在 SQL 注入的风险。例如：
const name=&#39;boom&#39;; yield Sequelize.query(`SELECT * from event from &amp;quot;name&amp;quot;= &#39;${name}&#39;`, {});  上面是正常的情况，假如我们信任某个参数的值，这样的写法问题不大。但是假如有用户恶意输入一些特殊字符，就能攻击系统了。如下：</description>
    </item>
    
  </channel>
</rss>